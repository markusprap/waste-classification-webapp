// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  name                  String?
  image                 String?
  emailVerified         DateTime?
  plan                  String    @default("free") // 'free', 'premium', 'corporate'
  usageCount            Int       @default(0)
  usageLimit            Int       @default(100)
  lastUsageReset        DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  accounts              Account[]
  sessions              Session[]
  classifications       Classification[]
  subscriptions         Subscription[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Classification {
  id          String   @id @default(cuid())
  userId      String?
  imageUrl    String?
  result      String   // JSON string of classification result
  confidence  Float?
  wasteType   String?
  category    String?
  location    String?  // JSON string for location data
  source      String   @default("web") // web, mobile, api
  createdAt   DateTime @default(now())
  
  // Relations
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("classifications")
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String
  plan      String   // free, premium, corporate
  status    String   // active, inactive, cancelled
  startDate DateTime @default(now())
  endDate   DateTime?
  amount    Float?
  currency  String   @default("USD")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}
